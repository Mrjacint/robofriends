{"version":3,"sources":["constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","registerServiceWorker.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQEST_ROBOTS_PENDING","REQEST_ROBOTS_SUCCESS","REQEST_ROBOTS_FAILED","initalStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","Header","connect","searchRobots","requestRobots","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobot","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.782ee209.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQEST_ROBOTS_PENDING = \"REQEST_ROBOTS_PENDING\";\r\nexport const REQEST_ROBOTS_SUCCESS = \"REQEST_ROBOTS_SUCCESS\";\r\nexport const REQEST_ROBOTS_FAILED = \"REQEST_ROBOTS_FAILED\";\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQEST_ROBOTS_PENDING,\r\n  REQEST_ROBOTS_SUCCESS,\r\n  REQEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initalStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initalStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '1px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nexport class ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n             hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry\r\n","import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n  return <h1 className=\"f1\">RoboFriends</h1>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Header from \"../components/Header\";\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobot: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nconst App = (props) => {\r\n  //   const [robots, setRobots] = useState([]);\r\n  //const [searchField, setSerachfeald] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //   .then((response) => response.json())\r\n    //   .then((users) => {\r\n    //     setRobots(users);\r\n    //   });\r\n    props.onRequestRobot();\r\n  }, []);\r\n\r\n  //   const onSearchChange = (event) => {\r\n  //     setSerachfeald(event.target.value);\r\n  //   };\r\n\r\n  const filteredRobots = props.robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(props.searchField.toLowerCase());\r\n  });\r\n  return props.isPending ? (\r\n    <h1>Loading</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <Header />\r\n      <SearchBox searchChange={props.onSearchChange} />\r\n      <Scroll>\r\n        <ErrorBoundry>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundry>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQEST_ROBOTS_PENDING,\r\n  REQEST_ROBOTS_SUCCESS,\r\n  REQEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) => dispatch({ type: REQEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport \"tachyons\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}